@startuml

scale 1920*1080

package stdcvt {

    abstract class CvtDriver {
     - modelcode : int
     - apispec : int
     - updated : time_t

     .. Company, Model, Simple Version ..
     + int getmodelcode ();     // company code + model code
     + int getapispec ();
     + time_t getlastupdated ();
     + void updated ();

     + virtual string getversion ();
     + virtual string getmodel ();
     + virtual string getcompany ();

     .. Life cycle ..
     + virtual int initialize (CvtConfig option);
     + virtual int finalize ();
     + virtual int preprocess (); // read sensor data, read commands
     + virtual int postprocess (); // write sensor data, execute commands

     .. Process ..
     + virtual CvtDevice *getdevice (int index);
     + virtual bool *sharedevice(CvtDevice *pdevice);
     + virtual CvtCommand *getcommand(int index);
     + virtual bool control(CvtCommand *pcmd);
    }

    class CvtDeviceSpec {
     - manufacturer : string
     - model : string
     - type : devtype_t
     - section : devsec_t
     - target : devtarget_t

     string getmanufacturer ();
     string getmodel ();
     devtype_t gettype ();
     devsec_t getsection ();
     devtarget_t gettarget ();
    }

    abstract class CvtDevice {
     - id : int
     - status : devstat_t
     - devspec : CvtDeviceSpec
     - errno : int
     - errmsg : string

     .. Device ID ..
     + int getid ();

     .. Device Status ..
     + devstat_t getstatus ();
     + devstat_t setstatus (devstat_t devstat);
     + errno_t geterrno ();
     + string geterrmsg ();

     .. Device Spec ..
     + CvtDeviceSpec *getspec(); // Sensor, Motor, Switch, Controller

     + string tostring();
    }

    class CvtSensor {
     - unit : obsunit_t
     - value : double
     - bool copyproperites (CvtDevice *pdevice);

     + obsunit_t getunit ();
     + obsunit_t setunit (obsunit_t unit);
     + double writeobservation (double value);
     + double readobservation ();
     + string tostring();
    }

    class CvtMotor {
     - target : double
     - current : double
     - lastcmdid : int
     + double getcurrentposition ();
     + double gettargetposition ();
     + int setposition (int cmdid, double position);
     + int setstop (int cmdid);
     + string tostring();
    }

    class CvtSwitch {
     - lastcmdid : int
     + int seton (int cmdid);
     + int setoff (int cmdid);
     + string tostring();
    }

    class CvtCommand {
     - id : int
     - driverspec : CvtDriverSpec
     - onoff : bool

     bool getonoff ();
     bool setonoff (bool onoff);
    }

    class CvtRatioCommand {
     - ratio : double
     double getratio();
     double setratio(double ratio);
    }

    class CvtOption {
     - option : json
     - objects : map

     int getint (string key);
     double getdouble (string key);
     string get (string key);
     void *getobject (string key);
    }

    CvtCommand <|-- CvtRatioCommand

    CvtDriver "1" *- "n" CvtDevice
    CvtDriver "1" *-- "1" CvtOption

    CvtDevice <|-- CvtSensor
    CvtDevice <|-- CvtMotor
    CvtDevice <|-- CvtSwitch

    CvtDevice "1" *- "1" CvtDeviceSpec

    CvtMotor -- CvtRatioCommand : > use
    CvtSwitch -- CvtCommand : > use
}

package "Sample CvtDriver" #DDDDDD {
    class SampleCvtDriver {
    }

    CvtDriver <|-- SampleCvtDriver

    class SampleSensor {
    }

    class SampleMotor {
    }

    class SampleSwitch {
    }

    CvtSensor <|-- SampleSensor
    CvtMotor <|-- SampleMotor
    CvtSwitch <|-- SampleSwitch

    SampleCvtDriver *-- SampleSensor
    SampleCvtDriver *-- SampleMotor
    SampleCvtDriver *-- SampleSwitch
}

@enduml
